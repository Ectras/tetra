.rust-default:
  image: ubuntu:latest
  before_script:
    - export DEBIAN_FRONTEND=noninteractive

    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - apt-get update -qq
    - 'command -v ssh-agent >/dev/null || ( apt-get install -qq openssh-client )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    
    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - touch ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    
    ## Collect SSH RSA public key from gitlab and add them to the known_hosts file
    ## 
    - ssh-keyscan -H gitlab.lrz.de >> ~/.ssh/known_hosts
    - apt-get install -qq curl

    # Install rust without toolchain (rustup will later install whatever is specified in rust-toolchain.toml)
    - curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none

    # Put cargo in $PATH
    - source "$HOME/.cargo/env"

    # Install packages for building dependencies
    - apt-get install -qq build-essential clang cmake gfortran libopenblas-dev libssl-dev pkg-config

default:
  tags:
    - kubernetes

build:
  stage: build
  extends: .rust-default
  script:
    # Report on the used Rust version
    - rustc --version

    # Build the project
    - cargo build -vv

  artifacts:
    paths:
      - target/debug

build:docs:
  stage: build
  extends: .rust-default
  script:
    - cargo doc --color always --no-deps
  artifacts:
    paths:
      - target/doc

test:
  stage: test
  extends: .rust-default
  dependencies:
    - build
  script:
    - cargo test --color always --workspace --no-fail-fast

clippy:
  stage: test
  extends: .rust-default
  dependencies:
    - build
  script:
    - cargo clippy --color always --workspace --all-features --all-targets --no-deps -- -Dwarnings
  allow_failure: true

pages:
  stage: deploy
  image: alpine:latest
  dependencies:
    - test
    - build:docs
  script:
    - mv target/doc public/
  artifacts:
    paths:
      - public
  #only:
  #  - main
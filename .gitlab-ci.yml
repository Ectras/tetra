stages:
  - docker
  - main

.rust-default:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  variables:
    CARGO_HOME: $CI_PROJECT_DIR/cargo
  cache:
    - key: cargo
      paths: [ cargo/ ]
  before_script:
    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - touch ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    
    ## Collect SSH RSA public key from gitlab and add them to the known_hosts file
    ## 
    - ssh-keyscan -H gitlab.lrz.de >> ~/.ssh/known_hosts

.docker-build:
  stage: docker
  image: docker:20-dind
  services:
    - name: docker:20-dind
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  after_script:
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

.custom_functions: &custom_functions
  - cached_docker_build() {
      if docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG ; then
        echo -e "\033[1;37mUsing previous '$CI_COMMIT_REF_SLUG' image as cache";
        docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG . ;
      elif docker pull $CI_REGISTRY_IMAGE:$CI_DEFAULT_BRANCH ; then
        echo -e "\033[1;37mUsing default '$CI_COMMIT_REF_SLUG' image as cache";
        docker build --cache-from $CI_REGISTRY_IMAGE:$CI_DEFAULT_BRANCH --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG . ;
      else
        echo -e "\033[1;37mNo image to use as cache for building available";
        CACHE_IMAGE="";
        docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG . ;
      fi;
      docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG;
    }
  

default:
  tags:
    - kubernetes

# Build docker image when it does not exist yet
docker:build:
  extends: .docker-build
  script:
    - *custom_functions
    - apk update
    - apk add curl jq
    - if [[ $( curl --header "PRIVATE-TOKEN:$REGISTRY_API_TOKEN" https://gitlab.lrz.de/api/v4/projects/$CI_PROJECT_ID/registry/repositories/$REGISTRY_ID/tags/$CI_COMMIT_REF_SLUG | jq -r '.name' ) == "$CI_COMMIT_REF_SLUG" ]] ; then
        echo -e "\033[1;37mImage '$CI_COMMIT_REF_SLUG' exists";
      else
        echo -e "\033[1;37mImage '$CI_COMMIT_REF_SLUG' does not exist. Building...";
        echo "IMAGE REBUILT" > built.flag;
        cached_docker_build;
      fi
  artifacts:
    paths:
      # The file signals that the Docker image has already been built in this pipeline
      - built.flag
    expire_in: 5 minutes

# Build docker image when Dockerfile changes
docker:rebuild:
  extends: .docker-build
  script:
    - *custom_functions
    - if ! test -f "built.flag" ; then
        cached_docker_build;
      else
        echo -e "\033[1;37mImage '$CI_COMMIT_REF_SLUG' already rebuilt by first docker job. Skipping...";
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - Dockerfile
  needs:
    - docker:build

check:clippy:
  stage: main
  extends: .rust-default
  script:
    - cargo clippy --color always --workspace --all-features --all-targets --no-deps -- -Dwarnings
  allow_failure: true

check:fmt:
  stage: main
  extends: .rust-default
  script:
    - cargo fmt -- --check --color always
  allow_failure: true

build:
  stage: main
  extends: .rust-default
  script:
    # Report on the used Rust version
    - rustc --version

    # Build the project
    - cargo build -vv --color always

  artifacts:
    paths:
      - target/debug
    expire_in: 1 hour

build:docs:
  stage: main
  extends: .rust-default
  script:
    - cargo doc --color always --no-deps
  artifacts:
    paths:
      - target/doc
    expire_in: 1 day

test:
  stage: main
  extends: .rust-default
  needs:
    - build
  script:
    - cargo test --color always --workspace --no-fail-fast

pages:
  stage: main
  image: alpine:latest
  variables:
    GIT_STRATEGY: none
  needs:
    # We only want to deploy the docs if test succeeds
    - job: test
      artifacts: false
    - build:docs
  script:
    - mv target/doc public/
    - echo '<meta http-equiv="refresh" content="0; url=tetra">' > public/index.html
  artifacts:
    paths:
      - public
  only:
    - main
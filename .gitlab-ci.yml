before_script:
  - export DEBIAN_FRONTEND=noninteractive

  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - apt-get update -qq
  - 'command -v ssh-agent >/dev/null || ( apt-get install openssh-client -qq )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  
  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - touch ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  
  ## Collect SSH RSA public key from gitlab and add them to the known_hosts file
  ## 
  - ssh-keyscan -H gitlab.lrz.de >> ~/.ssh/known_hosts
  - apt-get install -qq curl

  # Install rust without toolchain (rustup will later install whatever is specified in rust-toolchain.toml)
  - curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none

  # Put cargo in $PATH
  - source "$HOME/.cargo/env"

image: "ubuntu:20.04"

default:
  tags:
    - kubernetes

rust:
  stage: build
  script:
    # Install packages for building dependencies
    - apt-get install -qq clang cmake gfortran libopenblas-dev libssl-dev pkg-config

    # Report on the used Rust version
    - rustc --version

    - cargo build -vv
    - cargo test
